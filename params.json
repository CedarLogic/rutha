{"name":"Rutha","tagline":"An Hapi Angular Front End Stack","body":"# Rutha Stack - Taming HapiJS and AngularJS #\r\n**Ru** le \r\n**T** hem \r\n**H** apiJS \r\n**A** ngularJS\r\n\r\n[![Build Status](https://travis-ci.org/molekilla/rutha.svg?branch=master)](https://travis-ci.org/molekilla/rutha)\r\n\r\nPure pragmatic NodeJS stack\r\n\r\n### Last update: 0.6.3\r\n[Changelog](https://github.com/molekilla/rutha/blob/master/changelog.md)\r\n\r\n### Features ###\r\n* **Rule Them All with a single environment**: Both development and production environment are the same. We concat, annotate, mix some ingredients and offer you the same production environment for development.\r\n* **Specs and Functional Tests (Frontend)**: Based partially on [year of moo](http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-karma.html) \r\n* **Frontend Code Patterns** [Todd Motto's](http://toddmotto.com/opinionated-angular-js-styleguide-for-teams/) AngularJS guideline: I also based some ideas on [PackPub's Angular Book](http://www.packtpub.com/angularjs-web-application-development/book?tag=dp/masteringwebwithangularjs-abr1/0913)\r\n* [Chris Sevilleja's 'Easy Node authentication' local and facebook sample code for HapiJS](http://scotch.io/tutorials/javascript/easy-node-authentication-setup-and-local)\r\n* Uses canned responses / server mocks / nobackend inspired by Euge's [canned responses](https://github.com/euge/canned-responses)\r\n* [Angular Hint](https://github.com/angular/angular-hint)\r\n\r\n#### Server ####\r\n* **Hapi 8.0.0**\r\n* **Underscore for frontend server side templates**\r\n\r\n#### Frontend ####\r\n* **AngularJS 1.3.x**\r\n\r\n#### Tooling ####\r\n* **Jasmine 2.0**\r\n* **Grunt JIT**\r\n* **BrowserSync**\r\n* [Grunt ngAnnotate](https://github.com/mzgol/grunt-ng-annotate)\r\n* [Grunt Angular Templates](https://github.com/ericclemmons/grunt-angular-templates)\r\n* [Grunt  Wiredep](https://github.com/stephenplusplus/grunt-wiredep)\r\n* **Visionmedia/debug** [module](https://github.com/visionmedia/debug) by default\r\n* **Lout module** for [API docs](https://github.com/spumko/lout) by default\r\n* Basic cssmin task\r\n* `grunt-nsp-package` support\r\n* [Istanbul code coverage support](http://gotwarlost.github.io/istanbul/)\r\n\r\n#### Documentation ####\r\n* [Hapi Swagger](https://github.com/glennjones/hapi-swagger)\r\n* [Grunt JSDoc3](https://github.com/krampstudio/grunt-jsdoc)\r\n\r\n### Installing ###\r\n1. Clone repo\r\n2. Rename text containing `rutha` to `your_app_name`\r\n3. Be sure to have node 0.10.32 or greater (e.g. nvm use 0.10.32)\r\n4. Run `npm install grunt-cli -g`\r\n5. Change dir to ui and run `npm install` and then `bower install`\r\n6. Open a new tab and change dir to service and run `npm install`\r\n\r\n## Deploying rutha apps with forthcoming rutha-deploy (beta) ##\r\n\r\n1. Run `grunt build` to generate frontend assets\r\n2. Add zip file to commit e.g. git add releases/v0.1.0.zip. \r\n3. In rutha-deploy, configure group_vars with your settings\r\n\r\n    ```ruby\r\n    # devops\r\n    domain: disrupting_app.com\r\n    ssl_name: disrupting_app\r\n    # rutha\r\n    app_name: disrupting_app\r\n    app_repo: git@github.com:molekilla/rutha.git\r\n    app_branch: release0.1.0\r\n    app_version: v0.1.0\r\n    app_env: \r\n      NODE_ENV: production\r\n    ```\r\n    \r\n4. Add hosts to /etc/ansible/hosts\r\n5. Enable host in playbook.yml\r\n\r\n    ```yaml\r\n    ---\r\n    # This playbook deploys a rutha server.\r\n\r\n    - hosts: my_cloud\r\n      sudo: yes\r\n      remote_user: mycloud\r\n\r\n      # localhost staging - 192.168.88.88\r\n      # - hosts: all\r\n\r\n      roles:\r\n        - nodejs\r\n        - nodejs_modules\r\n        - mongodb\r\n        - rutha    \r\n        - nginx\r\n    ```\r\n   \r\n6. Configure cloud / server with SSH key to get repo (or customize rutha-deploy to fetch from somewhere else).\r\n7. Run `ansible-playbook provisioning/playbook.yml --private-key ~/keys/mykey.pem -u mycloud` or configure Gruntfile and run `grunt deploy`\r\n\r\n## Deploying rutha frontend app ##\r\n\r\n1. Run `grunt build` to generate frontend assets\r\n2. Add zip file to commit e.g. git add releases/v0.1.0.zip (or customize rutha-deploy to fetch from somewhere else).\r\n3. In your devops workflow, unpack zip and run ui/lib/hapi/index.js \r\n\r\n## Deploying rutha service app ##\r\n\r\n1. Copy service directory or get from repo\r\n3. In your devops workflow, run service/lib/hapi/index.js \r\n\r\n\r\n### Grunt Help (Service) ###\r\n\r\n* `grunt serve`: Serves API service\r\n* `grunt spec`: Runs Jasmine 2.0 specs\r\n* `grunt coverage`: Runs Istanbul code coverage. Outputs HTML reports to `test/coverage/reports`\r\n* `grunt auditpkg`: Verifies modules that contains security issues\r\n* `grunt migrate:create [--name]`: Creates a migration task. Args: --name: migration name (optional)\r\n* `grunt migrate:up [--revision]`: Migrates up. Args: --revision: revision name (optional)\r\n* `grunt migrate:down [--revision]`: Migrates down. Args: --revision: revision name (optional)\r\n* `grunt docs`: Builds jsdoc3 documentation.\r\n### Grunt Help (Frontend) ###\r\n\r\n* `grunt serve`: Serves frontend service with no auto reload\r\n* `grunt autosync`: Serves frontend service with auto reload\r\n* `grunt spec`: Runs jshint and server side / UI specs\r\n* `grunt test`: Runs E2E/Functional tests (Angular)\r\n* `grunt build`: Prepares UI assets\r\n* `grunt jshinting`: Verifies javascript using jshint\r\n* `grunt auditpkg`: Verifies modules that contains security issues\r\n\r\n###  About Angular Tests\r\n`ui/src/test/lib` contains libs require for testing. Scope.SafeApply can be added as optional (see yearofmoo blog post)\r\n\r\n### Nginx routes (Optional) ###\r\n\r\n```\r\nserver { \r\n# simple reverse-proxy for Rutha (Very useful!)\r\n    listen       80;\r\n    server_name  localhost;\r\n    access_log   dev.log;\r\n    #error_page   http://here;\r\n\r\n  location /api {\r\n    proxy_pass      http://127.0.0.1:3002;\r\n    proxy_redirect  default;\r\n    proxy_set_header Host $host;\r\n  }\r\n\r\n  location / {\r\n    proxy_pass      http://127.0.0.1:3005;\r\n    proxy_redirect  default;\r\n    proxy_set_header Host $host;\r\n  }\r\n}\r\n\r\n```\r\n\r\n### Maintainers ###\r\nRogelio Morrell C. \r\n\r\n### Disclaimer ###\r\nFeel free to fork. MIT Licensed.","google":"UA-58433271-1","note":"Don't delete this file! It's used internally to help with page regeneration."}